// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Temperature.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Temperature.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Temperature::Temperature()
{
    // m_temperature com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6536e911
    m_temperature = 0.0;
    // m_variance com.eprosima.idl.parser.typecode.PrimitiveTypeCode@18eed359
    m_variance = 0.0;

}

Temperature::~Temperature()
{


}

Temperature::Temperature(const Temperature &x)
{
    m_temperature = x.m_temperature;
    m_variance = x.m_variance;
}

Temperature::Temperature(Temperature &&x)
{
    m_temperature = x.m_temperature;
    m_variance = x.m_variance;
}

Temperature& Temperature::operator=(const Temperature &x)
{

    m_temperature = x.m_temperature;
    m_variance = x.m_variance;

    return *this;
}

Temperature& Temperature::operator=(Temperature &&x)
{

    m_temperature = x.m_temperature;
    m_variance = x.m_variance;

    return *this;
}

size_t Temperature::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Temperature::getCdrSerializedSize(const Temperature& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Temperature::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_temperature;
    scdr << m_variance;
}

void Temperature::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_temperature;
    dcdr >> m_variance;
}

/*!
 * @brief This function sets a value in member temperature
 * @param _temperature New value for member temperature
 */
void Temperature::temperature(float _temperature)
{
m_temperature = _temperature;
}

/*!
 * @brief This function returns the value of member temperature
 * @return Value of member temperature
 */
float Temperature::temperature() const
{
    return m_temperature;
}

/*!
 * @brief This function returns a reference to member temperature
 * @return Reference to member temperature
 */
float& Temperature::temperature()
{
    return m_temperature;
}

/*!
 * @brief This function sets a value in member variance
 * @param _variance New value for member variance
 */
void Temperature::variance(float _variance)
{
m_variance = _variance;
}

/*!
 * @brief This function returns the value of member variance
 * @return Value of member variance
 */
float Temperature::variance() const
{
    return m_variance;
}

/*!
 * @brief This function returns a reference to member variance
 * @return Reference to member variance
 */
float& Temperature::variance()
{
    return m_variance;
}


size_t Temperature::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Temperature::isKeyDefined()
{
   return false;
}

void Temperature::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
}
